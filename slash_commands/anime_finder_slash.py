from datetime import datetime
from settings.config import settings
import discord
from discord.ext import commands
import requests
from bs4 import BeautifulSoup
import json
import math


async def _anime_search(interaction: discord.Interaction, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    name = –Ω–∞–∑–≤–∞–Ω–∏–µ
    global _link, anime_url, i, text
    header = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \
            (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'
    }
    url_seacrh = f'https://shikimori.one/animes?search={name.replace(" ", "+")}'
    page = requests.get(url_seacrh, headers=header)
    soup = BeautifulSoup(page.text, "lxml")
    NothingHere = soup.find_all('div', class_='b-nothing_here')
    if NothingHere is []:
        return await interaction.response.send_message('–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', ephemeral=True)
    restr = soup.find_all('p', class_='age-restricted-warning')
    if str(restr) != '[]':
        for n in restr:
            i = n.text
        if str(i) == '–î–æ—Å—Ç—É–ø–æ–≥—Ä–∞–Ω–∏—á–µ–Ω 18+':
            return await interaction.response.send_message('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.')
    links = []
    for hr in soup.find_all('a'):
        links.append(hr.get('href'))
    try:
        anime_url = links[17]
    except IndexError:
        pass
    api_url = f'https://shikimori.org/api/animes/{anime_url.replace("https://shikimori.one/animes/", "")}'
    r = requests.get(api_url, headers=header)
    json_data = r.json()
    anime_name = json_data['name']
    russian_name_anime = json_data['russian']
    japanese_name_anime = json_data['japanese'][0]
    img_anime_temp = json_data['image']['original']
    img_anime = f'https://desu.shikimori.one/system/animes/preview/{str(img_anime_temp).replace("/system/animes/original/", "")}'
    description = json_data['description']
    kind = json_data['kind']
    score = json_data['score']
    status = json_data['status']
    episodes = json_data['episodes']
    episodes_aired = json_data['episodes_aired']
    released = json_data['released_on']
    rating_age = json_data['rating']
    duration_of_series = json_data['duration']
    page_a = requests.get(anime_url, headers=header)
    soup_a = BeautifulSoup(page_a.text, "lxml")
    genres = soup_a.find_all('span', class_='genre-ru')
    genres_l = (((str(genres).replace('<span class="genre-ru">', '')).replace('</span>', '')).replace('[', '')).replace(']', '')
    if released is None:
        released = '–ù–µ –≤—ã—à–µ–ª.'
    if description is None:
        description = '-'
    if str(kind) == 'tv':
        kind = '–¢–í —Å–µ—Ä–∏–∞–ª.'
    if str(kind) == 'special':
        kind = '–°–ø–µ—à–ª.'
    if str(kind) == 'ova':
        kind = '–ûVA.'
    if str(kind) == 'music':
        kind = '–ö–ª–∏–ø.'
    if str(kind) == 'movie':
        kind = '–§–∏–ª—å–º.'
    if str(kind) == 'ona':
        kind = 'ONA.'
    if str(status) == 'released':
        status = '–í—ã—à–µ–ª.'
    if str(status) == 'anons':
        status = '–ê–Ω–æ–Ω—Å.'
    if str(status) == 'ongoing':
        status = '–û–Ω–≥–æ–∏–Ω–≥.'
        released = '-'
    rating_age_detail = None
    if str(rating_age) == 'none':
        rating_age = '-'
        rating_age_detail = '-'
    if str(rating_age) == 'g':
        rating_age = 'G'
        rating_age_detail = '–ù–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.'
    if str(rating_age) == 'pg_13':
        rating_age = 'PG 13'
        rating_age_detail = '–î–µ—Ç—è–º –¥–æ 13 –ª–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –∂–µ–ª–∞—Ç–µ–ª–µ–Ω.'
    if str(rating_age) == 'r_plus':
        rating_age = 'R+'
        rating_age_detail = '–õ–∏—Ü–∞–º –¥–æ 17 –ª–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω.'
    if str(rating_age) == 'r':
        rating_age = 'R'
        rating_age_detail = '–õ–∏—Ü–∞–º –¥–æ 17 –ª–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∑—Ä–æ—Å–ª–æ–≥–æ.'
    if str(rating_age) == 'r_17':
        rating_age = 'R-17'
        rating_age_detail = '–õ–∏—Ü–∞–º –¥–æ 17 –ª–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∑—Ä–æ—Å–ª–æ–≥–æ.'
    if str(rating_age) == 'pg':
        rating_age = 'PG'
        rating_age_detail = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π.'
    if str(rating_age) == 'rx':
        rating_age = 'Rx'
        rating_age_detail = '–•–µ–Ω—Ç–∞–π.'
    days = math.floor(duration_of_series / (24 * 60))
    total_minutes = duration_of_series
    left_minutes = total_minutes % (24 * 60)
    hours = math.floor(left_minutes / 60)
    mins = total_minutes - (days * 1440) - (hours * 60)
    duration_of_series = f'{hours} —á. {mins} –º.'
    embed = discord.Embed(title='‚†Ä', color=0x9900ff)
    embed.add_field(name='–ù–∞–∑–≤–∞–Ω–∏–µ: ', value=f'`{anime_name}`', inline=False)
    embed.add_field(name='–†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ', value=f'`{russian_name_anime}`', inline=True)
    embed.add_field(name='–Ø–ø–æ–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ', value=f'`{japanese_name_anime}`', inline=True)
    if len(description) > 1024:
        description_too_long = f'–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –ø–æ —Å—Å—ã–ª–∫–µ: [–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ.]({anime_url})'
        embed.add_field(name='–û–ø–∏—Å–∞–Ω–∏–µ:', value=f'**{description_too_long}**', inline=False)
    else:
        embed.add_field(name='–û–ø–∏—Å–∞–Ω–∏–µ:', value=f'`{description}`', inline=False)
    embed.add_field(name='–¢–∏–ø: ', value=f'`{kind}`', inline=True)
    embed.add_field(name='–°—Ç–∞—Ç—É—Å:', value=f'`{status}`', inline=True)
    embed.add_field(name='–≠–ø–∏–∑–æ–¥–æ–≤:', value=f'`{episodes}`', inline=True)
    embed.add_field(name='–ñ–∞–Ω—Ä—ã:', value=f'`{genres_l}.`', inline=False)
    embed.add_field(name='–≠–ø–∏–∑–æ–¥–æ–≤ –≤—ã—à–ª–æ: ', value=f'`{episodes_aired}`', inline=True)
    embed.add_field(name='–í—ã—à–µ–ª –≤: ', value=f'`{released}`', inline=True)
    embed.add_field(name='–†–µ–π—Ç–∏–Ω–≥:', value=f'`{rating_age}`**({rating_age_detail})**', inline=False)
    embed.add_field(name='–†–µ–π—Ç–∏–Ω–≥ –∞–Ω–∏–º–µ:', value=f'`{score}‚≠ê`', inline=True)
    embed.add_field(name='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ø–∏–∑–æ–¥–∞: ', value=f'`{duration_of_series}`', inline=True)
    embed.add_field(name='–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–Ω–∏–º–µ:', value=f'[–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ]({anime_url})', inline=False)
    embed.set_thumbnail(url=img_anime)
    embed.set_footer(text="ü§ç ‚Ä¢ Serene. –°–¥–µ–ª–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é shikimori.one.")
    await interaction.response.send_message(embed=embed)
